// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // decode
    Not(in = instruction[15], out = c_A);
    And(a = true, b = instruction[5], out = c_Mux1);
    And(a = true, b = instruction[4], out = c_D);
    And(a = true, b = instruction[3], out = c_M);
    And(a = true, b = instruction[12], out = c_Mux2);
    
    Not(in = instruction[0], out = notj3);
    Not(in = instruction[1], out = notj2);
    Not(in = instruction[2], out = notj1);
    Mux8Way16(a = );
    
    // left and up part
    Mux16(a = outOfALU, b = instruction, sel = c_Mux1, out = inputOfA);
    ARegister(in = inputOfA, load = c_A, out = outOfA);
    
    // right and up part
    DRegister(in = outOfALU, load = c_D, out = outOfD);
    Mux16(a = outOfA, b = inM, sel = c_Mux2, out = AorM);
    ALU(x = outOfD, y = AorM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outOfALU, zr = isZr, ng = isNg);
    And(a = outOfALU, b = true, out = outM);
    Not(in = isNg, out = notNg);
    Not(in = isZr, out = notZr);
    And(a = notNg, b = notZr, out = isPositive);
    // PC
    PC(in = outOfA, load = doJump, inc = , reset = reset, out = pc);    
}